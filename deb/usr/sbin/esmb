#!/bin/bash
# EasySMB support tool
# Robert Socha 2020 - public domain
# Simple tool to support samba AD operations
# This tool assume full control of the Samba server
# Tested only on Ubuntu 18.04 LTS
#
#
#
# DO NOT REMOVE THIS LINES ABOVE
SMB_CONF_TEMPLATE="I0VTTUIKW2dsb2JhbF0KICAgd29ya2dyb3VwID0ge0RPTUFJTl9TSE9SVH0KICAgc2VjdXJpdHkgPSBBRFMKICAgcmVhbG0gPSB7RE9NQUlOfQoKICAgd2luYmluZCByZWZyZXNoIHRpY2tldHMgPSBZZXMKICAgdmZzIG9iamVjdHMgPSBhY2xfeGF0dHIKICAgbWFwIGFjbCBpbmhlcml0ID0gWWVzCiAgIHN0b3JlIGRvcyBhdHRyaWJ1dGVzID0gWWVzCgogICBkZWRpY2F0ZWQga2V5dGFiIGZpbGUgPSAvZXRjL2tyYjUua2V5dGFiCiAgIGtlcmJlcm9zIG1ldGhvZCA9IHNlY3JldHMgYW5kIGtleXRhYgoKICAgd2luYmluZCB1c2UgZGVmYXVsdCBkb21haW4gPSB5ZXMKCiAgICMgRW5hYmxlIHRoaXMgdG8gYWxsb3cgZW51bWVydGUgZG9tYWluIHVzZXJzCiAgICN3aW5iaW5kIGVudW0gdXNlcnMgPSB5ZXMKICAgI3dpbmJpbmQgZW51bSBncm91cHMgPSB5ZXMKCiAgIGxvYWQgcHJpbnRlcnMgPSBubwogICBwcmludGluZyA9IGJzZAogICBwcmludGNhcCBuYW1lID0gL2Rldi9udWxsCiAgIGRpc2FibGUgc3Bvb2xzcyA9IHllcwoKICAgaWRtYXAgY29uZmlnICogOiBiYWNrZW5kID0gdGRiCiAgIGlkbWFwIGNvbmZpZyAqIDogcmFuZ2UgPSAzMDAwLTc5OTkKCiAgIGlkbWFwIGNvbmZpZyB7RE9NQUlOX1NIT1JUfSA6IGJhY2tlbmQgPSByaWQKICAgaWRtYXAgY29uZmlnIHtET01BSU5fU0hPUlR9IDogcmFuZ2UgPSAxMDAwMC05OTk5OTkKCiAgIHRlbXBsYXRlIHNoZWxsID0gL2Jpbi9mYWxzZQogICB0ZW1wbGF0ZSBob21lZGlyID0gL2Rldi9udWxsCgogICB1c2VybmFtZSBtYXAgPSAvZXRjL3NhbWJhL2FkbWluaXN0cmF0b3IubWFwCiAgIHNlcnZlciBzdHJpbmcgPSAlaCBTYW1iYQogICBkbnMgcHJveHkgPSBubwogICBsb2cgZmlsZSA9IC92YXIvbG9nL3NhbWJhL2xvZy4lbQogICBtYXggbG9nIHNpemUgPSAxMDAwCiAgIHBhbmljIGFjdGlvbiA9IC91c3Ivc2hhcmUvc2FtYmEvcGFuaWMtYWN0aW9uICVkCiAgIHNlcnZlciByb2xlID0gbWVtYmVyIHNlcnZlcgogICBwYXNzZGIgYmFja2VuZCA9IHRkYnNhbQogICBvYmV5IHBhbSByZXN0cmljdGlvbnMgPSBubwogICB1bml4IGV4dGVuc2lvbnMgPSBubwogICB1bml4IHBhc3N3b3JkIHN5bmMgPSBubwogICBwYW0gcGFzc3dvcmQgY2hhbmdlID0gbm8KICAgbWFwIHRvIGd1ZXN0ID0gYmFkIHVzZXIKICAgdXNlcnNoYXJlIG1heCBzaGFyZXMgPSAwCgogICBpbmNsdWRlID0gL2V0Yy9zYW1iYS9zaGFyZXMuY29uZgo="
KRB5_CONF_TEMPLATE="I0VTTUIKW2xpYmRlZmF1bHRzXQogICAgZG5zX2xvb2t1cF9yZWFsbSA9IGZhbHNlCiAgICBkbnNfbG9va3VwX2tkYyA9IHRydWUKICAgIGRlZmF1bHRfcmVhbG0gPSB7RE9NQUlOfQo="
# Be safe
set -e
_HOME=$(eval echo '~')
CONFIG_DIR="${ESMB_CONFIG_DIR:-${_HOME}/.config/esmb}"
function fatal_error() {
  printf "$@\n"
  exit 1
}

if [[ $UID -ne 0 ]]
then
  fatal_error "run me as root user..."
fi

if [[ ! -d $CONFIG_DIR ]]
then
  mkdir -p -m 700 "${CONFIG_DIR}"
fi

if [[ ! -d $CONFIG_DIR ]]
then
  echo "Configuration directory doesn't \"$CONFIG_DIR\" exists... aborting"
  exit
fi

if ! command -v base64 &>/dev/null
then
  echo "Missing base64 command... aborting"
  exit 1
fi

_supported=0
if [[ "$1" == "--rampage" ]]
then
  _supported=1
  shift
  echo "Rampage mode ON!"
else
  if ! command -v lsb_release &>/dev/null
  then
    echo "Missing lsb_release command - unable to determine Linux distribution"
  else
    distro=$(lsb_release -i -s)
    if [[ $distro == "Ubuntu" ]]
    then
      _supported=1
    fi
  fi
fi
if [[ $_supported -ne 1 ]]
then
  echo "Only Ubuntu distribution is supported (tested).."
  echo "Run this command with \"--rampage\" switch to force execution any way!"
  exit 1
fi

function showUsage() {
  echo "esmb set-domain <domain_name> | set-nameservers <ns1:ns2:..nsN> | init | configure [--force] | show-templates | check-hostname | join-domain | add-share | zfs-support"
}

function init_me() {
local _quiet=0 _force=0 _packages
  while [[ $# -gt 0 ]]
  do
    case "$1"  in
      -q|--quiet)
        _quiet=1
        ;;
       -f|--force)
        _force=1
        ;;
    esac
    shift
  done
  if [[ -f $CONFIG_DIR/init ]] && [[ $_force -ne 1 ]]
  then
    echo "This system is already initialized... aborting"
    exit 1
  fi
  if [[ -x /usr/sbin/smbd ]] || command -v smbd &>/dev/null
  then
    if [[ $_force -ne 1 ]]
    then
      echo "Samba is already installed... unable to continue!"
      exit 1
    fi
  fi
  echo "Installing required packages..."
  _packages="acl attr samba samba-dsdb-modules samba-vfs-modules winbind libpam-winbind libnss-winbind krb5-config krb5-user"
  if [[ $_quiet -eq 0 ]]
  then
    apt-get update 
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y $_packages
  else
    apt-get update -qq
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -qq $_packages &>/dev/null
  fi
  systemctl disable --now smbd winbind nmbd
  # yeah... policy-rc.d
  for dir in $(smbd -b | egrep "LOCKDIR|STATEDIR|CACHEDIR|PRIVATE_DIR" | awk '{print $2}')
  do
    echo "Cleaning up directory $dir"
    find $dir -type f -name "*.tdb" -delete
    find $dir -type f -name "*.ldb" -delete
  done
  #echo "Preserving distrubution config file /etc/samba/smb.conf -> /etc/samba/smb.conf.dist"
  mv -f /etc/samba/smb.conf /etc/samba/smb.conf.dist
  touch "$CONFIG_DIR/init"
}

function showTemplates() {
  if [[ -z $SMB_CONF_TEMPLATE ]]
  then
    echo "Missing smb.conf template!"
    exit 1
  fi
  if [[ -z $KRB5_CONF_TEMPLATE ]]
  then
    echo "Missing krb5.conf template!"
    exit 1
  fi
  echo $SMB_CONF_TEMPLATE | base64 -d
  echo $KRB5_CONF_TEMPLATE | base64 -d
}

function setDomain() {
local _save_short=0
  if [[ -z $1 ]]
  then
    echo "Missing domain name... aborting!"
    exit 1
  fi
  if [[ $1 =~ : ]]
  then
    ad_domain="${1%%:*}"
    ad_short_domain="${1##*:}"
    _save_short=1
  else
    ad_domain="$1"
    ad_short_domain="${ad_domain%%.*}"
  fi
  ad_domain="${ad_domain^^}"
  ad_short_domain="${ad_short_domain^^}"
  
  if [[ -z $ad_domain ]] || [[ -z $ad_short_domain ]]
  then
    echo "Unable to parse domain name!"
    exit 1
  fi
  echo -n "$ad_domain" >"$CONFIG_DIR/domain"
  if [[ $_save_short -eq 1 ]]
  then
    echo -n "$ad_short_domain" >"$CONFIG_DIR/domain_short"
  else
    if [[ -f $CONFIG_DIR/domain_short ]] 
    then
      rm -f "$CONFIG_DIR/domain_short"
    fi
  fi
  echo "DOMAIN: $ad_domain / $ad_short_domain"
}

function domainName() {
local ad_domain
  if [[ -f $CONFIG_DIR/domain ]]
  then
    ad_domain=$(<"$CONFIG_DIR/domain")
  else
    echo "AD domain not configured!" >&2
    echo "Run: esmb set-domain <AD_DOMAIN>" >&2
    exit 1
  fi
  echo "$ad_domain"
}
function domainNameShort() {
local ad_short_domain ad_domain
  ad_domain=$(domainName)
  if [[ -f $CONFIG_DIR/domain_short ]]
  then
    ad_short_domain=$(<"$CONFIG_DIR/domain_short")
  else
    ad_short_domain="${ad_domain%%.*}"
  fi
  echo "$ad_short_domain"
}

function configure_me() {
local _check=0 _check1 _check2
  if [[ ! -f $CONFIG_DIR/init ]]
  then
    echo "System is not initialized!"
    exit 1
  fi
  _check1=0
  if [[ -f /etc/samba/smb.conf ]]
  then
    if head -n 1 /etc/samba/smb.conf | egrep -q "^#ESMB"
    then
      _check1=1
    fi
  fi
  _check2=0
  if [[ /etc/krb5.conf ]]
  then
    if head -n 1 /etc/krb5.conf | egrep -q "^#ESMB"
    then
      _check2=1
    fi
  fi
  _check=$(( $_check1 + $_check2 )) || true
  #echo C: $_check $_check1 $_check2
  if [[ $_check -ne 0 ]] && [[ $1 != "--force" ]]
  then
    echo "This system is already configured!"
    echo "Use --force option to conitune any way..."
    exit 1
  fi
  ad_domain="$(domainName)"
  ad_short_domain="$(domainNameShort)"
  echo $SMB_CONF_TEMPLATE | base64 -d >/etc/samba/smb.conf
  echo $KRB5_CONF_TEMPLATE | base64 -d >/etc/krb5.conf
  sed -i -e "s/{DOMAIN}/$ad_domain/g" /etc/samba/smb.conf /etc/krb5.conf
  sed -i -e "s/{DOMAIN_SHORT}/$ad_short_domain/g" /etc/samba/smb.conf /etc/krb5.conf
  touch /etc/samba/shares.conf
  if [[ ! -d /etc/samba/share.d ]]
  then
    mkdir /etc/samba/share.d
  fi
  echo "!root = ${ad_short_domain}\Administrator ${ad_short_domain}\administrator" >/etc/samba/administrator.map
  # configure /etc/nsswitch
  if ! egrep ^passwd: /etc/nsswitch.conf | grep -q winbind
  then
    echo "Adding winbind to passwd databases in /etc/nsswitch.conf"
    sed -i -E -e "s/(^passwd:.*$)/\1 winbind/" /etc/nsswitch.conf

  fi
  if ! egrep ^group: /etc/nsswitch.conf | grep -q winbind
  then
    echo "Adding winbind to group databases in /etc/nsswitch.conf"
    sed -i -E -e "s/(^group:.*$)/\1 winbind/" /etc/nsswitch.conf

  fi
  echo "System configured for $ad_domain / $ad_short_domain domain"
}
  
function show_info_etc_host() {
  echo "Put this in /etc/hosts:"
  echo
  echo "${1} ${2,,}.${3,,} ${2,,}"
  echo
}

function trimVar() {
local _var="$1"
  _var="${_var#"${_var%%[![:space:]]*}"}"   # remove leading whitespace characters
  _var="${_var%"${_var##*[![:space:]]}"}"   # remove trailing whitespace characters
  echo -n "$_var"
}

function dnsQuery() {
local _r
  if [[ -n $1 ]]
  then
    _r=$(getent hosts $1) || true
    echo "$(trimVar ${_r% *})"
  fi
}

function is_ip()  {
local _regex="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  if [[ $# -eq 1 ]]
  then
    if [[ "$1" =~ ${_regex} ]] 
    then
      return 0
    fi 
  fi
  return 1
}

function is_ipv6()  {
local _regex="^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
  if [[ $# -eq 1 ]]
  then
    if [[ "$1" =~ ${_regex} ]]
    then
      return 0
    fi
   fi
  return 1
}
# Try to find IP address of the host
function findIPaddress() {
local _ip
  _ip=$(trimVar $(hostname --all-ip-addresses))
  if is_ipv6 "$_ip"
  then
    fatal_error "IPv6 address detected - IPv6 not supported for the moment (yeah.....)"
  fi
  if is_ip "$_ip"
  then
    echo -n "$_ip"
  fi
}

function checkHostname() {
local _hostname _fqdn _domain _fip
  ad_domain="$(domainName)"
  ad_short_domain="$(domainNameShort)"
  _hostname=$(hostname)
  _domain=$(hostname -d)
  _fqdn=$(hostname -f)
  ip1=$(dnsQuery $_hostname)
  echo "FQDN: ${_fqdn,,}"
  echo "DOMAIN: ${_domain,,}"
  echo "NAME: ${_hostname,,} / $ip1"
  _fip=$(findIPaddress)
  if [[ $_fip =~ ^127 ]]
  then
    # found ip is useless
    _fip="<LAN_IP>"
  fi
  if [[ $ip1 =~ ^127 ]]
  then
    echo -e "\nHostname is resolving to 127.x.x.x address!"
    show_info_etc_host "$_fip" "$_hostname" "$ad_domain"
    exit 1
  fi
  if [[ -z $_fqdn ]]
  then
    echo -e "\nHostname of this system doesn't resolve to FQDN!"
    show_info_etc_host $ip1 $_hostname $ad_domain
    exit 1
  fi
  if [[ -z $_domain ]]
  then
    echo -e "\nUnable to resolve domain name for this host!"
    show_info_etc_host $ip1 $_hostname $ad_domain
    exit 1
  fi
  #ip2=$(dig -q $_fqdn +short)
  #if [[ $ip1 != $ip2 ]]
  #then
  # echo "IP address mismatch ($ip1 != $ip2)"
  # show_info_etc_host $ip1 $_hostname $ad_domain
  # exit
  # fi
  if [[ $_hostname == $_fqdn ]]
  then
    echo -e "\nHostname domain is missing!"
    show_info_etc_host $ip1 $_hostname $ad_domain
    exit 1
  fi
  if [[ $ad_domain != ${_domain^^} ]]
  then
    echo -e "\nHostname domain / AD domain mismatch!"
    show_info_etc_host $ip1 $_hostname $ad_domain
    exit 1
  fi
}

function checkResolver() {
local ad_domain _r
  ad_domain="$(domainName)"
  echo "Checking DNS for domain ${ad_domain,,}."
  _r=$(dnsQuery ${ad_domain})
  if [[ -z $_r ]]
  then
    echo "DNS doesn't work properly on this host for AD domain."
    echo -e "Please run:\n"
    echo -e "\tesmb set-resolver DCNS1 DCNS2 NS1 ... NSN"
    echo -e "\n\tWhere DCNS1, DCNS2 are DNS servers (IP addresses) for AD domain"
    exit 1
  fi
  echo "DNS looks OK!"
}

function setResolver() {
local _ns NS
  ad_domain="$(domainName)"
  ad_domain="${ad_domain,,}"
  for _ns in "$@"
  do
    _ns=$(trimVar "$_ns")
    if ! is_ip $_ns
    then
      fatal_error "$_ns is not an IP address"
    fi
  done
  # systemd knows better - I don't so... I will deal with this someday
  systemctl disable --now systemd-resolved
  if [[ -f /etc/resolv.conf ]]
  then
    rm -f /etc/resolv.conf
  fi
  echo "search ${ad_domain}" >/etc/resolv.conf
  for _ns in "$@"
  do
    _ns=$(trimVar "$_ns")
    echo "nameserver $_ns" >>/etc/resolv.conf
  done
}


function joinDomain() {
  net ads join -U administrator
  systemctl enable --now smbd winbind nmbd
  wbinfo --ping-dc
  touch "$CONFIG_DIR/joined"
}

function enableZFSShadow() {
	apt-get update -qq
	apt-get install -qq zfsutils-linux zfs-auto-snapshot &>/dev/null
	echo "ZFS support enabled."
}

function generateShares() {
  if [[ -d /etc/samba/share.d ]]
  then
    echo "#This file is autogenerated!" >/etc/samba/shares.conf
    for share in $(find /etc/samba/share.d -type f -name "*.conf")
    do
      echo "include = $share" >>/etc/samba/shares.conf
    done
    smbcontrol smbd reload-config
  fi
}
function addShare() {
local _opt
  _run=""
  _dry_mode=0
  if [[ "$1" == "-n" ]] || [[ "$1" == "--dry-run" ]]
  then
    shift
    _dry_mode=1
    _run="echo"
  fi
  if [[ ! -f $CONFIG_DIR/joined ]] && [[ $_dry_mode -eq 0 ]]
  then
    echo "This system is not configured!"
    exit 1
  fi
  if [[ $# -lt 2 ]]
  then
    echo "error: addShare <share-name> <directory|zfs-volume> [+<zfs-create-volume|zfs-shadow-copy|system-acl|windows-acl>]"
    exit 1
  fi
  if ! [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9_-]+$ ]]
  then
     echo "Share name can be [a-z][a-z0-9_-]+"
     exit 1
  fi
  share="${1,,}"
  share_path="$2"
  shift 2
  _zfs_mode=0
  _zfs_shadow=0
  _zfs_create_volume=0
  _ignore_system_acl=1
  while [[ $# -gt 0 ]]
  do
    _opt="${1#+}"
    case $_opt in
      zfs-shadow-copy|shadow-copy|shadow)
        _zfs_shadow=1
        _zfs_mode=1
        ;;
      zfs-create-volume|create-volume|create)
        _zfs_mode=1
        _zfs_create_volume=1
        ;;
      linux-acl|system-acl|acl)
        _ignore_system_acl=0
        ;;
      windows-acl)
        _ignore_system_acl=1
        ;;
      *)
        fatal_error "Unknow option: $_opt"
    esac
    shift
  done
  if [[ -f /etc/samba/share.d/$share.conf ]] && [[ $_dry_mode -eq 0 ]]
  then
    echo "Share is already definied!"
    exit 1
  fi
  if [[ $_zfs_mode -eq 1 ]]
  then
    if ! command -v zpool &>/dev/null || ! command -v zfs &>/dev/null
    then
      if [[ $_dry_mode -eq 0 ]]
      then
        fatal_error "Missing zfspool/zfs commands!"
      fi
    fi
  fi
  if [[ $_zfs_create_volume -eq 1 ]]
  then
    if [[ ! $share_path =~ ^[A-Za-z][a-zA-Z0-9]*/[A-Za-z0-9_-]*[A-Za-z0-9]$ ]]
    then
      fatal_error "ZFS volume name syntax error: zpool/volume expected"
    fi
    _zfspool="${share_path%/*}"
    _zfsvolume="${share_path#*/}"
    if ! zpool list -H -o name "$_zfspool" &>/dev/null
    then
      if [[ $_dry_mode -eq 0 ]]
      then
        fatal_error "ZFS pool \"$_zfspool\" doesn't exist!"
      fi
    fi
    if zfs list -H -o name $_zfspool/$_zfsvolume &>/dev/null
    then
      if [[ $_dry_mode -eq 0 ]]
      then
        fatal_error "ZFS volume \"$_zfspool/$_zfsvolume\" already exist!"
      fi
    fi
    $_run zfs create $_zfspool/$_zfsvolume
    $_run zfs set compression=off $_zfspool/$_zfsvolume
    $_run zfs set xattr=sa $_zfspool/$_zfsvolume
    $_run zfs set acltype=posixacl $_zfspool/$_zfsvolume
    if [[ $_zfs_shadow -eq 1 ]]
    then
      $_run zfs set com.sun:auto-snapshot=true $_zfspool/$_zfsvolume
      $_run zfs set snapdir=hidden $_zfspool/$_zfsvolume
    fi
    if [[ $_dry_mode -eq 0 ]]
    then
      if ! share_path=$(zfs list -H -o mountpoint $_zfspool/$_zfsvolume) 
      then
        fatal_error "Unable to find mountpoint for volume \"$_zfspool/$_zfsvolume\""
      fi
    else
      share_path="/$_zfspool/$_zfsvolume"
    fi
    share_path="${share_path}/share"
  else
    # canonicalize share path
    share_path=$(readlink -qmn "$share_path")
  fi
  _vfs="acl_xattr"
  if [[ $_zfs_shadow -eq 1 ]]
  then
    _vfs+=" shadow_copy2"
  fi
  share_template="[$share]\n"
  share_template+="\tpath = $share_path\n"
  share_template+="\tread only = no\n"
  share_template+="\tbrowsable = yes\n"
  share_template+="\tvfs objects = $_vfs\n"
  share_template+="\tacl_xattr:default acl style = windows\n"
  if [[ $_ignore_system_acl -eq 0 ]]
  then
    share_template+="\tacl_xattr:ignore system acls = no\n"
    share_template+="\tdirectory mask = 0770\n"
    share_template+="\tcreate mask = 0660\n"
  else
    share_template+="\tacl_xattr:ignore system acls = yes\n"
    share_template+="\tdirectory mask = 0777\n"
    share_template+="\tcreate mask = 0666\n"
    share_template+="\tforce directory mode = 0777\n"
    share_template+="\tforce create mode = 0666\n"
  fi
  if [[ $_zfs_shadow -eq 1 ]]
  then
    share_template+="\tshadow:snapdir = .zfs/snapshot\n"
    share_template+="\tshadow:sort = desc\n"
    share_template+="\tshadow:format = - %%Y-%%m-%%d-%%H%%M\n"
    share_template+="\tshadow:snapprefix = ^zfs-auto-snap_\\(frequent\\)\\{0,1\\}\\(hourly\\)\\{0,1\\}\\(daily\\)\\{0,1\\}\\(monthly\\)\\{0,1\\}\n"
    share_template+="\tshadow:delimiter = -20\n"
    share_template+="\tshadow:localtime = no\n"
  fi

  if [[ ! -d $share_path ]]
  then
    _mode="777"
    if [[ $_ignore_system_acl -eq 0 ]]
    then
      _mode="770"
    fi
    $_run mkdir -m $_mode ${share_path}
  fi
  if [[ $_dry_mode -eq 0 ]]
  then
    echo "Adding share ${share} : ${share_path}"
    printf "${share_template}" >/etc/samba/share.d/$share.conf
    generateShares
    echo "Status: OK"
  else
    echo -e "#SHARE"
    printf "${share_template}" 
  fi
  # Samba crashes too often with acl type set to everyone
  #dirtyHack Everyone - FULL CONTROL
  #setfattr -n security.NTACL -v "0sAwADAAAAAgAEAAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAScZAAAAHQAAAAAAAAAhAAAAAECAAAAAAAWAQAAAAAAAAABAgAAAAAAFgIAAAAAAAAAAgAcAAEAAAAAAxQA/wEfAAEBAAAAAAABAAAAAA==" "${share_path}"
}

cmd="$1"
case $cmd in
  auto)
    shift
    checkHostname
    checkResolver
    enableZFSShadow
    init_me -q
    configure_me "$@"
    ;;
  init)
    shift
    checkHostname
    checkResolver
    init_me "$@"
    ;;
  checkHostname|check-hostname)
    checkHostname
    ;;
  checkResolver|check-resolver)
    checkResolver
    ;;
  check)
    checkHostname
    checkResolver
    ;;
  configure)
    shift
    configure_me "$@"
    ;;
  setDomain|set-domain)
    shift
    setDomain "$@"
    ;;
  setResolver|set-resolver)
    shift
    setResolver "$@"
    ;;
  joinDomain|join-domain)
    shift
    joinDomain "$@"
    ;;
  addShare|add-share) 
    shift
    addShare "$@"
    ;;
  enable-zfs-support|enable-zfs-shadow-support|zfs-support)
    enableZFSShadow
    ;;
  showTemplates|show-templates)
    showTemplates
    ;;
  dns-query) 
    shift
    dnsQuery "$@"
    ;;
  *)
    showUsage
    exit 1
esac
# vim: set tabstop=2 shiftwidth=2 expandtab autoindent indentexpr= nosmartindent :
