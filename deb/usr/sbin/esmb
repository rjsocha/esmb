#!/bin/bash
# EasySMB support tool
# Robert Socha 2020 - public domain
# Simple tool to support samba AD operations
# This tool assume full control of the Samba server
#
#
#
#
# DO NOT REMOVE THIS LINES ABOVE
SMB_CONF_TEMPLATE="I0VTTUIKW2dsb2JhbF0KICAgd29ya2dyb3VwID0ge0RPTUFJTl9TSE9SVH0KICAgc2VjdXJpdHkgPSBBRFMKICAgcmVhbG0gPSB7RE9NQUlOfQoKICAgd2luYmluZCByZWZyZXNoIHRpY2tldHMgPSBZZXMKICAgdmZzIG9iamVjdHMgPSBhY2xfeGF0dHIKICAgbWFwIGFjbCBpbmhlcml0ID0gWWVzCiAgIHN0b3JlIGRvcyBhdHRyaWJ1dGVzID0gWWVzCgogICBkZWRpY2F0ZWQga2V5dGFiIGZpbGUgPSAvZXRjL2tyYjUua2V5dGFiCiAgIGtlcmJlcm9zIG1ldGhvZCA9IHNlY3JldHMgYW5kIGtleXRhYgoKICAgd2luYmluZCB1c2UgZGVmYXVsdCBkb21haW4gPSB5ZXMKCiAgICN3aW5iaW5kIGVudW0gdXNlcnMgPSB5ZXMKICAgI3dpbmJpbmQgZW51bSBncm91cHMgPSB5ZXMKCiAgIGxvYWQgcHJpbnRlcnMgPSBubwogICBwcmludGluZyA9IGJzZAogICBwcmludGNhcCBuYW1lID0gL2Rldi9udWxsCiAgIGRpc2FibGUgc3Bvb2xzcyA9IHllcwoKICAgaWRtYXAgY29uZmlnICogOiBiYWNrZW5kID0gdGRiCiAgIGlkbWFwIGNvbmZpZyAqIDogcmFuZ2UgPSAzMDAwLTc5OTkKCiAgIGlkbWFwIGNvbmZpZyB7RE9NQUlOX1NIT1JUfSA6IGJhY2tlbmQgPSByaWQKICAgaWRtYXAgY29uZmlnIHtET01BSU5fU0hPUlR9IDogcmFuZ2UgPSAxMDAwMC05OTk5OTkKCiAgIHRlbXBsYXRlIHNoZWxsID0gL2Jpbi9mYWxzZQogICB0ZW1wbGF0ZSBob21lZGlyID0gL2Rldi9udWxsCgogICB1c2VybmFtZSBtYXAgPSAvZXRjL3NhbWJhL2FkbWluaXN0cmF0b3IubWFwCiAgIHNlcnZlciBzdHJpbmcgPSAlaCBzZXJ2ZXIgKFNhbWJhKQogICBkbnMgcHJveHkgPSBubwogICBsb2cgZmlsZSA9IC92YXIvbG9nL3NhbWJhL2xvZy4lbQogICBtYXggbG9nIHNpemUgPSAxMDAwCiAgIHBhbmljIGFjdGlvbiA9IC91c3Ivc2hhcmUvc2FtYmEvcGFuaWMtYWN0aW9uICVkCiAgIHNlcnZlciByb2xlID0gc3RhbmRhbG9uZSBzZXJ2ZXIKICAgcGFzc2RiIGJhY2tlbmQgPSB0ZGJzYW0KICAgb2JleSBwYW0gcmVzdHJpY3Rpb25zID0geWVzCiAgIHVuaXggcGFzc3dvcmQgc3luYyA9IG5vCiAgIHBhbSBwYXNzd29yZCBjaGFuZ2UgPSBubwogICBtYXAgdG8gZ3Vlc3QgPSBiYWQgdXNlcgogICB1c2Vyc2hhcmUgbWF4IHNoYXJlcyA9IDAKCiAgIGluY2x1ZGUgPSAvZXRjL3NhbWJhL3NoYXJlcy5jb25mCg=="
KRB5_CONF_TEMPLATE="I0VTTUIKW2xpYmRlZmF1bHRzXQogICAgZG5zX2xvb2t1cF9yZWFsbSA9IGZhbHNlCiAgICBkbnNfbG9va3VwX2tkYyA9IHRydWUKICAgIGRlZmF1bHRfcmVhbG0gPSB7RE9NQUlOfQo="
# Be safe
set -e

if [[ $UID -ne 0 ]]
then
	echo "run me as root user..."
	exit 10
fi

CONFIG_DIR="${CONFIG_DIR:-/var/lib/esmb}"

if [[ ! -d $CONFIG_DIR ]]
then
	echo "Configuration directory doesn't \"$CONFIG_DIR\" exists... aborting"
	exit
fi

if ! command -v base64 &>/dev/null
then
	echo "Missing base64 command... aborting"
	exit 1
fi

_supported=0
if [[ "$1" == "--rampage" ]]
then
	_supported=1
	shift
	echo "Rampage mode ON!"
else
	if ! command -v lsb_release &>/dev/null
	then
		echo "Missing lsb_release command - unable to determine Linux distribution"
	else
		distro=$(lsb_release -i -s)
		if [[ $distro == "Ubuntu" ]]
		then
			_supported=1
		fi
	fi
fi
if [[ $_supported -ne 1 ]]
then
	echo "Only Ubuntu distribution is supported (tested).."
	echo "Run this command with \"--rampage\" switch to force execution any way!"
	exit 1
fi

function showUsage() {
	echo "esmb init | set-domain <domain_name> | configure [--force] | showTemplates | checkHostname | join-domain | add-share"
}

function init_me() {
	if [[ -f $CONFIG_DIR/init ]]
	then
		echo "This system is already initialized... aborting"
		exit 1
	fi
	if [[ -x /usr/sbin/smbd ]] || command -v smbd &>/dev/null
	then
		echo "Samba is already installed... unable to continue!"
		exit 1
	fi
	echo "Instaling required packages..."
	apt-get update -qq
	DEBIAN_FRONTEND=noninteractive apt-get install -qq acl attr samba samba-dsdb-modules samba-vfs-modules winbind libpam-winbind libnss-winbind libpam-krb5 krb5-config krb5-user dnsutils &>/dev/null
	systemctl stop smbd winbind nmbd
	# yeah... policy-rc.d
	for dir in $(smbd -b | egrep "LOCKDIR|STATEDIR|CACHEDIR|PRIVATE_DIR" | awk '{print $2}')
	do
		echo "Cleaning up directory $dir"
		find $dir -type f -name "*.tdb" -delete
		find $dir -type f -name "*.ldb" -delete
	done
	echo "Preserving distrubution config file /etc/samba/smb.conf -> /etc/samba/smb.conf.dist"
	mv /etc/samba/smb.conf /etc/samba/smb.conf.dist
	touch "$CONFIG_DIR/init"
}

function showTemplates() {
	if [[ -z $SMB_CONF_TEMPLATE ]]
	then
		echo "Missing smb.conf template!"
		exit 1
	fi
	if [[ -z $KRB5_CONF_TEMPLATE ]]
	then
		echo "Missing krb5.conf template!"
		exit 1
	fi
	echo $SMB_CONF_TEMPLATE | base64 -d
	echo $KRB5_CONF_TEMPLATE | base64 -d
}

function setDomain() {
local _save_short=0
	if [[ -z $1 ]]
	then
		echo "Missing domain name... aborting!"
		exit 1
	fi
	if [[ $1 =~ : ]]
	then
		ad_domain="${1%%:*}"
		ad_short_domain="${1##*:}"
		_save_short=1
	else
		ad_domain="$1"
		ad_short_domain="${ad_domain%%.*}"
	fi
	ad_domain="${ad_domain^^}"
	ad_short_domain="${ad_short_domain^^}"
	
	if [[ -z $ad_domain ]] || [[ -z $ad_short_domain ]]
	then
		echo "Unable to parse domain name!"
		exit 1
	fi
	echo -n "$ad_domain" >"$CONFIG_DIR/domain"
	if [[ $_save_short -eq 1 ]]
	then
		echo -n "$ad_short_domain" >"$CONFIG_DIR/domain_short"
	else
		if [[ -f $CONFIG_DIR/domain_short ]] 
		then
			rm -f "$CONFIG_DIR/domain_short"
		fi
	fi
	echo "DOMAIN: $ad_domain / $ad_short_domain"
}

function domainName() {
local ad_domain
	if [[ -f $CONFIG_DIR/domain ]]
	then
		ad_domain=$(<"$CONFIG_DIR/domain")
	else
		echo "AD domain not configured!" >&2
		echo "Run: esmb setDomain command" >&2
		exit 1
	fi
	echo "$ad_domain"
}
function domainNameShort() {
local ad_short_domain ad_domain
	ad_domain=$(domainName)
	if [[ -f $CONFIG_DIR/domain_short ]]
	then
		ad_short_domain=$(<"$CONFIG_DIR/domain_short")
	else
		ad_short_domain="${ad_domain%%.*}"
	fi
	echo "$ad_short_domain"
}

function configure_me() {
local _check=0 _check1 _check2
	if [[ ! -f $CONFIG_DIR/init ]]
	then
		echo "System is not initialized!"
		exit 1
	fi
	_check1=0
	if [[ -f /etc/samba/smb.conf ]]
	then
		if head -n 1 /etc/samba/smb.conf | egrep -q "^#ESMB"
		then
			_check1=1
		fi
	fi
	_check2=0
	if [[ /etc/krb5.conf ]]
	then
		if head -n 1 /etc/krb5.conf | egrep -q "^#ESMB"
		then
			_check2=1
		fi
	fi
	_check=$(( $_check1 + $_check2 )) || true
	#echo C: $_check $_check1 $_check2
	if [[ $_check -ne 0 ]] && [[ $1 != "--force" ]]
	then
		echo "This system is already configured!"
		echo "Use --force option to conitune any way..."
		exit 1
	fi
	ad_domain="$(domainName)"
	ad_short_domain="$(domainNameShort)"
	echo $SMB_CONF_TEMPLATE | base64 -d >/etc/samba/smb.conf
	echo $KRB5_CONF_TEMPLATE | base64 -d >/etc/krb5.conf
	sed -i -e "s/{DOMAIN}/$ad_domain/g" /etc/samba/smb.conf /etc/krb5.conf
	sed -i -e "s/{DOMAIN_SHORT}/$ad_short_domain/g" /etc/samba/smb.conf /etc/krb5.conf
	touch /etc/samba/shares.conf
	if [[ ! -d /etc/samba/share.d ]]
	then
		mkdir /etc/samba/share.d
	fi
	echo "!root = ${ad_short_domain}\Administrator" >/etc/samba/administrator.map
	# configure /etc/nsswitch
	if ! egrep ^passwd: /etc/nsswitch.conf | grep -q winbind
	then
		echo "Adding winbind to passwd databases in /etc/nsswitch.conf"
		sed -i -E -e "s/(^passwd:.*$)/\1 winbind/" /etc/nsswitch.conf

	fi
	if ! egrep ^group: /etc/nsswitch.conf | grep -q winbind
	then
		echo "Adding winbind to group databases in /etc/nsswitch.conf"
		sed -i -E -e "s/(^group:.*$)/\1 winbind/" /etc/nsswitch.conf

	fi
	echo "System configured for $ad_domain / $ad_short_domain domain"
}
	
function checkHostname() {
local _hostname _fqdn _domain
	_hostname=$(hostname)
	_domain=$(hostname -d)
	_fqdn=$(hostname -f)
	ip1=$(dig $_hostname +short)
	ip2=$(dig $_fqdn +short)
	echo "FQDN: $_fqdn"
	echo "DOMAIN: $_domain"
	echo "NAME: $_hostname / $ip1"
	ad_domain="$(domainName)"
	ad_short_domain="$(domainNameShort)"
	if [[ $ip1 != $ip2 ]]
	then
		echo "IP address mismatch"
		exit
	fi
	if [[ $ip1 =~ ^127 ]]
	then
		echo "Hostname is resolving to 127.x.x.x address!"
		exit 1
	fi
	if [[ $_hostname == $_fqdn ]]
	then
		echo "Hostname domain is missing!"
		exit 1
	fi
	if [[ $ad_domain != ${_domain^^} ]]
	then
		echo "Hostname domain / AD domain mismatch!"
		exit 1
	fi
}

function joinDomain() {
	net ads join -U administrator
	systemctl start smbd winbind nmbd
	wbinfo --ping-dc
	touch "$CONFIG_DIR/joined"
}

function generateShares() {
	if [[ -d /etc/samba/share.d ]]
	then
		echo "#This file is autogenerated!" >/etc/samba/shares.conf
		for share in $(find /etc/samba/share.d -type f -name "*.conf")
		do
			echo "include = $share" >>/etc/samba/shares.conf
		done
		smbcontrol smbd reload-config
	fi
}
function addShare() {
	if [[ ! -f $CONFIG_DIR/joined ]]
	then
		echo "This system is not ready!"
		exit 1
	fi
        if [[ $# -ne 2 ]]
        then
                echo "error: addShare <share-name> <directory>"
                exit 1
        fi
        if ! [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]+$ ]]
        then
                echo "Share name can be [a-z][a-z0-9]+"
                exit 1
        fi
        share="${1,,}"
        share_path="$2"
	if [[ -f /etc/samba/share.d/$share.conf ]]
	then
		echo "Share already definied!"
		exit 1
	fi
	share_template="[$share]\n"
	share_template+="\tpath = $share_path\n"
	share_template+="\tread only = no\n"
	share_template+="\tbrowsable = yes\n"
	share_template+="\tforce directory mode = 2770\n"
	share_template+="\tforce create mode = 0664\n"
        echo "Adding share ${share} : ${share_path}"
	printf "${share_template}" >/etc/samba/share.d/$share.conf
	if [[ ! -d $share_path ]]
	then
		mkdir -m 2770 -p "${share_path}"
		chown root:"domain admins" "${share_path}"
	fi
	generateShares
}

cmd="$1"
case $cmd in
	init)
		checkHostname
		init_me
		;;
	checkHostname)
		checkHostname
		;;
	configure)
		shift
		configure_me "$@"
		;;
	setDomain|set-domain)
		shift
		setDomain "$@"
		;;
	joinDomain|join-domain)
		shift
		joinDomain "$@"
		;;
	addShare|add-share) 
		shift
		addShare "$@"
		;;
	showTemplates)
		showTemplates
		;;
	*)
		showUsage
		exit 1
esac
